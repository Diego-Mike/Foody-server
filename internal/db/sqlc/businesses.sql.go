// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: businesses.sql

package db

import (
	"context"
	"database/sql"
)

const addBusinessMember = `-- name: AddBusinessMember :one
INSERT INTO business_members (business_id, user_id, business_position) VALUES ($1, $2, $3) 
RETURNING business_id, user_id, business_position, created_at
`

type AddBusinessMemberParams struct {
	BusinessID       int64  `json:"business_id"`
	UserID           int64  `json:"user_id"`
	BusinessPosition string `json:"business_position"`
}

func (q *Queries) AddBusinessMember(ctx context.Context, arg AddBusinessMemberParams) (BusinessMember, error) {
	row := q.db.QueryRowContext(ctx, addBusinessMember, arg.BusinessID, arg.UserID, arg.BusinessPosition)
	var i BusinessMember
	err := row.Scan(
		&i.BusinessID,
		&i.UserID,
		&i.BusinessPosition,
		&i.CreatedAt,
	)
	return i, err
}

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO businesses (name, city, address, latitude, longitude, ubication_photo) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING business_id, name, city, address, latitude, longitude, ubication_photo, created_at
`

type CreateBusinessParams struct {
	Name           string         `json:"name"`
	City           string         `json:"city"`
	Address        string         `json:"address"`
	Latitude       string         `json:"latitude"`
	Longitude      string         `json:"longitude"`
	UbicationPhoto sql.NullString `json:"ubication_photo"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, createBusiness,
		arg.Name,
		arg.City,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
		arg.UbicationPhoto,
	)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.UbicationPhoto,
		&i.CreatedAt,
	)
	return i, err
}
