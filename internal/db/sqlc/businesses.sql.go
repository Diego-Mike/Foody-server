// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: businesses.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const addBusinessMember = `-- name: AddBusinessMember :one
INSERT INTO business_members (business_id, user_id, business_position) VALUES ($1, $2, $3) 
RETURNING user_id
`

type AddBusinessMemberParams struct {
	BusinessID       int64  `json:"business_id"`
	UserID           int64  `json:"user_id"`
	BusinessPosition string `json:"business_position"`
}

func (q *Queries) AddBusinessMember(ctx context.Context, arg AddBusinessMemberParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addBusinessMember, arg.BusinessID, arg.UserID, arg.BusinessPosition)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const addBusinessSchedule = `-- name: AddBusinessSchedule :execrows
INSERT INTO business_schedule (day_of_week, opening_hour, closing_hour) VALUES (UNNEST($1::smallint[]), UNNEST($2::time[]), UNNEST($3::time[]))
`

type AddBusinessScheduleParams struct {
	DaysOfWeek   []int16     `json:"days_of_week"`
	OpeningHours []time.Time `json:"opening_hours"`
	ClosingHours []time.Time `json:"closing_hours"`
}

func (q *Queries) AddBusinessSchedule(ctx context.Context, arg AddBusinessScheduleParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, addBusinessSchedule, pq.Array(arg.DaysOfWeek), pq.Array(arg.OpeningHours), pq.Array(arg.ClosingHours))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO businesses (name, city, address, latitude, longitude, presentation, clients_max_amount) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING business_id, name, city, address, latitude, longitude, presentation, clients_max_amount, created_at
`

type CreateBusinessParams struct {
	Name             string        `json:"name"`
	City             string        `json:"city"`
	Address          string        `json:"address"`
	Latitude         string        `json:"latitude"`
	Longitude        string        `json:"longitude"`
	Presentation     string        `json:"presentation"`
	ClientsMaxAmount sql.NullInt16 `json:"clients_max_amount"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, createBusiness,
		arg.Name,
		arg.City,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
		arg.Presentation,
		arg.ClientsMaxAmount,
	)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Presentation,
		&i.ClientsMaxAmount,
		&i.CreatedAt,
	)
	return i, err
}

const getBusinessById = `-- name: GetBusinessById :one
SELECT business_id, name, city, address, latitude, longitude, presentation, clients_max_amount, created_at FROM businesses WHERE business_id = $1
`

func (q *Queries) GetBusinessById(ctx context.Context, businessID int64) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusinessById, businessID)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Presentation,
		&i.ClientsMaxAmount,
		&i.CreatedAt,
	)
	return i, err
}
