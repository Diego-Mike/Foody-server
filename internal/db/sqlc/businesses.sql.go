// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: businesses.sql

package db

import (
	"context"
	"database/sql"
)

const addBusinessMember = `-- name: AddBusinessMember :one
INSERT INTO business_members (business_id, user_id, business_position) VALUES ($1, $2, $3) 
RETURNING user_id
`

type AddBusinessMemberParams struct {
	BusinessID       int64  `json:"business_id"`
	UserID           int64  `json:"user_id"`
	BusinessPosition string `json:"business_position"`
}

func (q *Queries) AddBusinessMember(ctx context.Context, arg AddBusinessMemberParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addBusinessMember, arg.BusinessID, arg.UserID, arg.BusinessPosition)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO businesses (name, city, address, latitude, longitude, presentation, clients_max_amount) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING business_id, name, city, address, latitude, longitude, presentation, clients_max_amount, created_at
`

type CreateBusinessParams struct {
	Name             string        `json:"name"`
	City             string        `json:"city"`
	Address          string        `json:"address"`
	Latitude         string        `json:"latitude"`
	Longitude        string        `json:"longitude"`
	Presentation     string        `json:"presentation"`
	ClientsMaxAmount sql.NullInt16 `json:"clients_max_amount"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRowContext(ctx, createBusiness,
		arg.Name,
		arg.City,
		arg.Address,
		arg.Latitude,
		arg.Longitude,
		arg.Presentation,
		arg.ClientsMaxAmount,
	)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Presentation,
		&i.ClientsMaxAmount,
		&i.CreatedAt,
	)
	return i, err
}

const getBusinessById = `-- name: GetBusinessById :one
SELECT business_id, name, city, address, latitude, longitude, presentation, clients_max_amount, created_at FROM businesses WHERE business_id = $1
`

func (q *Queries) GetBusinessById(ctx context.Context, businessID int64) (Business, error) {
	row := q.db.QueryRowContext(ctx, getBusinessById, businessID)
	var i Business
	err := row.Scan(
		&i.BusinessID,
		&i.Name,
		&i.City,
		&i.Address,
		&i.Latitude,
		&i.Longitude,
		&i.Presentation,
		&i.ClientsMaxAmount,
		&i.CreatedAt,
	)
	return i, err
}

const getHomeBusinessFood = `-- name: GetHomeBusinessFood :many
SELECT b.business_id, b."name", b.city, bf.food_id, bf.food_title, bf.food_description, bf.food_price, bf.food_available_per_day, 
bf.food_img FROM businesses b 
INNER JOIN lateral (
    SELECT bf.food_id, bf.food_title, bf.food_description, bf.food_price, bf.food_available_per_day, bf.food_img FROM business_food bf 
    where b.business_id = bf.business_id 
    ORDER BY bf.created_at DESC
    LIMIT 3
) bf ON true
WHERE b.business_id >= $1::bigint
LIMIT $2::bigint
`

type GetHomeBusinessFoodParams struct {
	AfterBusiness int64 `json:"after_business"`
	PageSize      int64 `json:"page_size"`
}

type GetHomeBusinessFoodRow struct {
	BusinessID          int64          `json:"business_id"`
	Name                string         `json:"name"`
	City                string         `json:"city"`
	FoodID              int64          `json:"food_id"`
	FoodTitle           string         `json:"food_title"`
	FoodDescription     sql.NullString `json:"food_description"`
	FoodPrice           int64          `json:"food_price"`
	FoodAvailablePerDay sql.NullInt16  `json:"food_available_per_day"`
	FoodImg             string         `json:"food_img"`
}

func (q *Queries) GetHomeBusinessFood(ctx context.Context, arg GetHomeBusinessFoodParams) ([]GetHomeBusinessFoodRow, error) {
	rows, err := q.db.QueryContext(ctx, getHomeBusinessFood, arg.AfterBusiness, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHomeBusinessFoodRow{}
	for rows.Next() {
		var i GetHomeBusinessFoodRow
		if err := rows.Scan(
			&i.BusinessID,
			&i.Name,
			&i.City,
			&i.FoodID,
			&i.FoodTitle,
			&i.FoodDescription,
			&i.FoodPrice,
			&i.FoodAvailablePerDay,
			&i.FoodImg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextHomePage = `-- name: GetNextHomePage :one
SELECT b.business_id from businesses b 
RIGHT JOIN business_food bf ON b.business_id = bf.business_id
WHERE b.business_id > $1 
LIMIT 1
`

func (q *Queries) GetNextHomePage(ctx context.Context, businessID int64) (sql.NullInt64, error) {
	row := q.db.QueryRowContext(ctx, getNextHomePage, businessID)
	var business_id sql.NullInt64
	err := row.Scan(&business_id)
	return business_id, err
}
