// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: business_reservations.sql

package db

import (
	"context"
	"database/sql"
)

const addFoodsToReservation = `-- name: AddFoodsToReservation :execrows
INSERT INTO reserve_food (reservation_id, food_id, amount, details) VALUES($1, $2, $3, $4) RETURNING reservation_id, food_id, amount, details, created_at
`

type AddFoodsToReservationParams struct {
	ReservationID int64          `json:"reservation_id"`
	FoodID        int64          `json:"food_id"`
	Amount        int16          `json:"amount"`
	Details       sql.NullString `json:"details"`
}

func (q *Queries) AddFoodsToReservation(ctx context.Context, arg AddFoodsToReservationParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, addFoodsToReservation,
		arg.ReservationID,
		arg.FoodID,
		arg.Amount,
		arg.Details,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createNewNotification = `-- name: CreateNewNotification :one
INSERT INTO business_reservations_notificacions (reservation_id, notification_title, notification_description) VALUES($1, $2, $3)
RETURNING reservation_id, notification_title, notification_description, created_at
`

type CreateNewNotificationParams struct {
	ReservationID           int64  `json:"reservation_id"`
	NotificationTitle       string `json:"notification_title"`
	NotificationDescription string `json:"notification_description"`
}

func (q *Queries) CreateNewNotification(ctx context.Context, arg CreateNewNotificationParams) (BusinessReservationsNotificacion, error) {
	row := q.db.QueryRowContext(ctx, createNewNotification, arg.ReservationID, arg.NotificationTitle, arg.NotificationDescription)
	var i BusinessReservationsNotificacion
	err := row.Scan(
		&i.ReservationID,
		&i.NotificationTitle,
		&i.NotificationDescription,
		&i.CreatedAt,
	)
	return i, err
}

const createReservation = `-- name: CreateReservation :one

INSERT INTO business_reservations (business_id, user_id, order_schedule) VALUES($1, $2, $3)
RETURNING reservation_id, business_id, user_id, order_schedule, accepted, created_at
`

type CreateReservationParams struct {
	BusinessID    int64        `json:"business_id"`
	UserID        int64        `json:"user_id"`
	OrderSchedule sql.NullTime `json:"order_schedule"`
}

// Creating new order
func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (BusinessReservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation, arg.BusinessID, arg.UserID, arg.OrderSchedule)
	var i BusinessReservation
	err := row.Scan(
		&i.ReservationID,
		&i.BusinessID,
		&i.UserID,
		&i.OrderSchedule,
		&i.Accepted,
		&i.CreatedAt,
	)
	return i, err
}

const getUserReservation = `-- name: GetUserReservation :many

SELECT br.reservation_id, br.business_id, br.created_at, br.order_schedule, rf.food_id,
bf.food_title,  bf.food_price, bf.food_img, rf.amount, rf.details, bf.food_description
FROM business_reservations br 
INNER JOIN reserve_food rf ON br.reservation_id = rf.reservation_id 
INNER JOIN business_food bf ON rf.food_id = bf.food_id
WHERE br.user_id = $1 and br.created_at::date = CURRENT_DATE
`

type GetUserReservationRow struct {
	ReservationID   int64          `json:"reservation_id"`
	BusinessID      int64          `json:"business_id"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	OrderSchedule   sql.NullTime   `json:"order_schedule"`
	FoodID          int64          `json:"food_id"`
	FoodTitle       string         `json:"food_title"`
	FoodPrice       int64          `json:"food_price"`
	FoodImg         string         `json:"food_img"`
	Amount          int16          `json:"amount"`
	Details         sql.NullString `json:"details"`
	FoodDescription sql.NullString `json:"food_description"`
}

// Getting order
func (q *Queries) GetUserReservation(ctx context.Context, userID int64) ([]GetUserReservationRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserReservation, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserReservationRow{}
	for rows.Next() {
		var i GetUserReservationRow
		if err := rows.Scan(
			&i.ReservationID,
			&i.BusinessID,
			&i.CreatedAt,
			&i.OrderSchedule,
			&i.FoodID,
			&i.FoodTitle,
			&i.FoodPrice,
			&i.FoodImg,
			&i.Amount,
			&i.Details,
			&i.FoodDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
